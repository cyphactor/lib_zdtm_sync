2007-08-02 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Implemented the zdtm_calendar_length() function in the zdtm_common.h
and zdtm_common.c files. I implemented this function as a means of
returning the number of bytes necessary for the sync type specific item
data for calendar items.

* Implemented the zdtm_address_length() function in the zdtm_common.h
and zdtm_common.c files so that there existed a function to return the
length the of calendar specific data in bytes for a given calendar item.

2007-07-30 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Created the zdtm_adw_msg.h and zdtm_adw_msg.c source files and
implemented a structure to represent ADW messages as well as a function
to parse raw ADW message content into a ADW message content structure.
Beyond that, I defined the ADW_MSG_TYPE constant so that it can be used
for message type identification and comparison.

* Modified the zdtm_message_body structures zdtm_spec_type_content union
by adding in instance of the zdtm_adw_msg_content structure called 'adw'
to it so that the message body structure could be used to represent an
ADW message body. I also modified the _zdtm_parse_raw_msg() function so
that it parses raw ADW messages using the newly created
zdtm_parse_raw_adw_msg() function.

2007-07-03 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Fixed a bug in the zdtm_adr_msg.c file that was causing a segfault in
the zdtm_parse_raw_adr_msg() function. Specifically it was a problem
with the fact that the num_params was being interpreted as a uint32_t
when it should have only been interpreted as a uint16_t. Hence, when the
buf pointer was incremeneted by uint32_t it was incremented 2 bytes too
far.

2007-05-03 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Implemented the zdtm_obtain_sync_id_lists() function in the
zdtm_sync.h and zdtm_sync.c files respectively and documented it so that
it could be used through the general API.

* Modified zdtm_test_daemon.c to use zdtm_obtain_sync_id_lists() rather
than _zdtm_obtain_sync_id_lists().

* Moved the _zdtm_obtain_sync_id_lists() function to zdtm_sync.h and
zdtm_sync.c and renamed it zdtm_obtain_sync_id_lists() so that there was
no extra wrapper layer for that function.

* Moved the _zdtm_obtain_todo_item() function from zdtm_proto.h and
zdtm_proto.c to zdtm_sync.h and zdtm_sync.c and renamed it
zdtm_obtain_todo_item() so that there was no need for an extra wrapper
layer to make it part of the general API.

* Moved the _zdtm_obtain_calendar_item() function from zdtm_proto.h and
zdtm_proto.c to zdtm_sync.h and zdtm_sync.c and renamed it
zdtm_obtain_calendar_item() so that there was no need for an extra
wrapper layer to make it part of the general API.

* Moved the _zdtm_obtain_address_item() function from zdtm_proto.h and
zdtm_proto.c to zdtm_sync.h and zdtm_sync.c and renamed it
zdtm_obtain_address_item() so that there was no need for an extra
wrapper layer to make it part of the general API.

* Moved the _zdtm_delete_item() function from zdtm_proto.h and
zdtm_proto.c to zdtm_sync.h and zdtm_sync.c and renamed it
zdtm_delete_item() so that there was no need for an extra wrapper lapyer
to make it part of the general API.

2007-05-02 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Moved the standard sync stuff from the zdtm_test_daemon.c into the 
standard libraries public API specifically in the zdtm_initiate_sync() 
function. I also modified the the zdtm_test_daemon.c file and removed 
what should now be unnecessary code.

2007-04-04 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Updated all the Copyright notices at the top of the files to be
correct for GPL and added to the files which were missing a Copyright
notice.

* Implemented the _zdtm_delete_item() function in the zdtm_proto.h and
zdtm_proto.c files respectively. I also documented the
_zdtm_delete_item() function in the zdtm_proto.h file.

* Updated docs/lib_zdtm_sync_detailed_plan.planner and
docs/lib_zdtm_sync_detailed_plan.html to reflect the addition of the
_zdtm_delete_item() function.

* Implemented the zdtm_calendar_item structure in zdtm_common.h to
represent calendar items.

* Implemented the _zdtm_parse_calendar_item_params() function in the
zdtm_proto.h and zdtm_proto.c files respectively. I also documented the
_zdtm_parse_calendar_item_params() function in the zdtm_proto.h file.

* Implemented the _zdtm_obtain_calendar_item() function in the
zdtm_proto.h and zdtm_proto.c files respectively. I also documented the
_zdtm_obtain_calendar_item() function in the zdtm_proto.h file.

* Renamed the zdtm_todo structure to zdtm_todo_item structure to better
identify what it represents and modified the appropriate code and
documentation that was effected.

* Updated docs/lib_zdtm_sync_detailed_plan.planner and
docs/lib_zdtm_sync_detailed_plan.html to reflect the addition of the
_zdtm_parse_calendar_item_params() and _zdtm_obtain_calendar_item()
functions.

* Implemented the zdtm_address_item structure in zdtm_common.h to
represent an address book item.

* Implemented the _zdtm_parse_address_item_params() function in the
zdtm_proto.h and zdtm_proto.c files respectively. I also documented the
_zdtm_parse_address_item_params() function in the zdtm_proto.h file.

* Implemented the _zdtm_obtain_address_item() function in the
zdtm_proto.h and zdtm_proto.c files respectively. I also documented the
_zdtm_obtain_address_item() function in the zdtm_proto.h file.

* Implemented the _zdtm_free_params() function in the zdtm_proto.h and
zdtm_prot.c files respectively. I also documented the
_zdtm_free_params() function in the zdtm_proto.h file.

* Modified the _zdtm_obtain_todo_item(), _zdtm_obtain_calendar_item(),
and _zdtm_obtain_address_item() functions to use the _zdtm_free_params()
function to free the params array allocated by their calls to
_zdtm_obatain_item().

* Updated docs/lib_zdtm_sync_detailed_plan.planner and
docs/lib_zdtm_sync_detailed_plan.html to reflect the addition of the
_zdtm_parse_address_item_params() and _zdtm_obtain_address_item()
functions.

2007-03-28 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Added the zdtm_adr_msg.h and zdtm_adr_msg.c files to the svn repos
because I forgot too last commit.

* Added the RSS message functions to the _zdtm_prepare_message()
function so that it was built properly before sending it.

* Commented out the full-sync -2 error return in the test daemon so that
in the case of full syncs it will get all the members etc.

2007-03-15 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Created the zdtm_adr_msg.h and zdtm_adr_msg.c files and wrote the ADR
message handling code so that ADR messages can now be properly parsed
and handled.

* Added code to the _zdtm_parse_raw_msg() function in the zdtm_msgs.c
file so that ADR messages will now use the code from zdtm_adr_msg.h and
zdtm_adr_msg.c to parse them when they are received. I also added code
to zdtm_msgs.h so that the header would be included and the structure
representing the ADR message payload would be included in the body
structures payload union.

* Wrote and documented the _zdtm_obtain_item() function in the
zdtm_proto.h and zdtm_proto.c files respectively. Its purpose is to
obtain the data for an item on the Zaurus given that items sync id. It
is designed to return an array of type struct zdtm_adr_msg_param and the
number of params in the array via the parameter passing and returns an
integer representing success or failure.

* Added the DATA_ID_* macros to zdtm_common.h so that internally we may
identify different paramater types that are specified by the Zaurus
protocol. These are specifically useful for the parameter parsing using
the parameter based item format specifiers obtained via the protocol.

* Created the zdtm_todo structure in the zdtm_common.h file which is
designed to basically represent a Todo Item. It will be what gets
returned when on Obtains a TodoItem from the Zaurus.

* Implemented the _zdtm_parse_todo_item_params() function which
basically takes in the previously obtained parameter format and the
parameters retreived from the Zaurus using the _zdtm_obtain_item()
function and builds a struct zdtm_todo with the data from the params. I
also documented the _zdtm_parse_todo_item_params() function.

* Wrote and documented the _zdtm_obtain_todo_item() function which
handles obtaining a todo item from the Zaurus given a synchronization
id.

* Updated the lib_zdtm_sync_detailed_plan .planner and .html files
respectively to show these modifications.

2007-03-12 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Modified the _zdtm_reset_sync_log() function to match the previous
implementation since the protocol document is not descriptive enough for
one to implement this function properly. I also modified the funtions
associated documentation to match my modifications.

* Modified zdtm_test_daemon.c to ignore the -C option for now and call
the _zdtm_reset_sync_log() function in the appropriate place for it to
match the protocol order which I have seen in all my packet captures of
the protocol.

* Modified the rms message implementation in zdtm_rms_msg.h and
zdtm_rms_msg.c to eliminate some possible problems in the future and
provide better code consistancy.

* Modified _zdtm_obtain_last_time_synced() to check if it recvs a time
set to all zeros, and returns a value signifying this case, so that
callers may determine if this case occurs because it is seen to occur
the first time a sync is ever performed on a device.

* Modified zdtm_test_daemon.c to check the call
_zdtm_obtain_device_info() after zdtm_check_cur_auth_state() in normal
(non-slow) syncs.

2007-03-11 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Implemented the RDI and ADI messages respectively in zdtm_rdi_msg.h,
zdtm_rdi_msg.c, zdtm_adi_msg.h, and zdtm_adi_msg.c. To do so I needed to
add the struct zdtm_adi_msg_param to the zdtm_types.h file so that I
could create a list of params inside the library environment structure
as well as have one in the ADI message payload structure.

* Added code to zdtm_initialize() and zdtm_finalize() to appropriately
handle the initializing and freeing of the memory used for the parameter
list (data format).

* Wrote and documented the _zdtm_obtain_param_format() function in
zdtm_proto.h and zdtm_proto.c respectively.

* Added code to zdtm_test_daemon.c which uses
_zdtm_obtain_param_format() and prints the obtained parameter format
information on standard out as a method of testing it's functionality
(passed with flying colors).

* Updated lib_zdtm_sync_detailed_plan.planner and
lib_zdtm_sync_detailed_plan.html to represent these changes.

2007-03-05 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Wrote and documented the _zdtm_authenticate_passcode() function in the
zdtm_proto.h and zdtm_proto.c files respectively. I also updated the
lib_zdtm_detailed_plan.planner file and lib_zdtm_detailed_plan.html
files to represent the completion of this function.

* Wrote and documented the _zdtm_obtain_list_time_synced() function in
the zdtm_proto.h and zdtm_proto.c files respectively. I also updated the
lib_zdtm_detailed_plan.planner file and lib_zdtm_detailed_plan.html
files to represent the completion of this function.

* Wrote and documented the _zdtm_set_last_time_synced() function in the
zdtm_proto.h and zdtm_proto.c files respectively. I also updated the
lib_zdtm_detailed_plan.planner file and lib_zdtm_detailed_plan.html
files to represent the completion of this function.

* Wrote and documented the _zdtm_state_sync_done() function in the
zdtm_proto.h and zdtm_proto.c files respectively. I also updated the
lib_zdtm_detailed_plan.planner file and lib_zdtm_detailed_plan.html
files to represent the completion of this function.

* Integrated the _zdtm_state_sync_done() function into the
zdtm_terminate_sync() function found in the general API (zdtm_sync.h and
zdtm_sync.c) and updated it's documentation appropriately. I also
integrated the _zdtm_disconnect() function into the
zdtm_terminate_sync() function. I also updated the
lib_zdtm_detailed_plan.planner file and lib_zdtm_detailed_plan.html
files to represent the completion and integration of the
_zdtm_state_sync_done() function.

* Made a correction for resource allocation to the termnate sync task
since I just completed it.

* Added a data member called retreived_device_info to the zdtm library
environment structure so that I can determine if the device info has
been retreived. I also modified the zdtm_initialize() function to
initialize this data member to a proper value of not set. Beyond that I
modified the _zdtm_obtain_device_info() function in zdtm_proto.c so that
it updates the retreived_device_info member when it successfully obtains
the device information. I also modified the zdtm_check_cur_auth_state()
function to check this flag and if it is not set then call
_zdtm_obtain_device_info() and then check the auth state.

* Did some testing and decided to move _zdtm_state_sync_done() call
outside of zdtm_terminate_sync() because _zdtm_state_sync_done() should
only get called if it successfully finished the sync and
zdtm_terminate_sync() needs to be able to be called to terminate the
sync in cases where it did not succeed.

* Corrected an issue with _zdtm_authenticate_passcode() and modified
_zdtm_wrapped_recv_message() to return the posetive return values from
_zdtm_recv_message() so that one can determine if they recv common
messages.

* Modified zdtm_test_daemon.c to test zdtm_initalize(),
zdtm_set_zaurus_ip(), zdtm_set_sync_type(), zdtm_initiate_sync(),
zdtm_check_cur_auth_state(), _zdtm_authenticate_passcode(),
_zdtm_obtain_sync_state(), _zdtm_obtain_last_time_synced(),
_zdtm_set_last_time_synced(), zdtm_requires_slow_sync(),
zdtm_terminate_sync(), and zdtm_finalize().

* Tested the latest modifications to zdtm_test_daemon which is now in a
state which it can actually be used to test the Zaurus synchronization.
The following functions look to be working properly: zdtm_initialize(),
zdtm_set_zaurus_ip(), zdtm_set_sync_type(), zdtm_initiate_sync(),
zdtm_check_cur_auth_state(), _zdtm_authenticate_passcode(),
_zdtm_obtain_sync_state(), _zdtm_obtain_last_time_synced(),
_zdtm_set_last_time_synced(), zdtm_requires_slow_sync(),
zdtm_terminate_sync(), and zdtm_finalize().

* Wrote and documented the _zdtm_obtain_sync_id_lists() function in the
zdtm_proto.h and zdtm_proto.c files. Integrated the
_zdtm_obtain_sync_id_lists() function into zdtm_test_daemon.c for
testing. I also updated the lib_zdtm_sync_detailed_plan.planner and
lib_zdtm_sync_detailed_plan.html to represent this modification.

* Modified the order of tasks so that the gantt chart is easier to read.

2007-02-22 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Added the retrieved_sync_state, todo_slow_sync_required,
calendar_slow_sync_required, and address_book_slow_sync_required flags
to the zdtm_environment structure so that I may use them to store and
track the sync stata. I also added code to zdtm_initialize() in
zdtm_sync.c to appropriately initialize them to logical values.

* Wrote and documented the _zdtm_obtain_sync_state() function in the
zdtm_proto.h and zdtm_proto.c files. It is basically a function which is
designed to obtain the sync state from the Zaurus and store it in the
state tracking variables which I recently added to the zdtm_environment
structure to define the state.

* Added the SYNC_TODO, SYNC_CALENDAR, and SYNC_ADDRESSBOOK macro
definitions to the zdtm_types.h file. They are macros which define the
values for each synchronization type.

* Wrote and documented the zdtm_requires_slow_sync() function in the
zdtm_sync.h and zdtm_sync.c files. It is currently designed to check if
a slow sync is required for the current sync type. If the sync state has
however not been retrieved from the Zaurus yet, it attempts to retrieve
the sync state and then determine if a slow sync is required.

2007-02-20 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Created the zdtm_proto.h and zdtm_proto.c files and added them to the
project.

* Moved the proper functions from the zdtm_sync.h and zdtm_sync.c files
into the zdtm_proto.h and zdtm_proto.c files so that only functions that
are in the zdtm_sync.h and zdtm_sync.c files are the general api
functions. I also renamed the moved functions by prepending an
underscore(_) to them to represent them as private functions. I also
correct the calls to the functions to match the new naming scheme in
testing/zdtm_test_daemon.c.

* Added code to the zdtm_environment structure to handle storing the
Zaurus IP address and added code to the zdtm_initiate_sync() function to
test for the IP address and return in failure if it hasn't been set.

* Added the function _zdtm_stop_listening() to the zdtm_net.h and
zdtm_net.c file which allows for proper closing of the listening socket.
I also added a call to it in the zdtm_finalize() function in the
zdtm_sync.h and zdtm_sync.c files so that it is handled by the general
API.

* Wrote a function called zdtm_set_zaurus_ip() in the general API which
not only sets the Zaurus IP in the current zdtm library environment but
also acts as a flag stating that the backend that is going to be used is
the network based rather than the direct USB backend.

* Added a call to the recently renamed _zdtm_connect() function inside
the zdtm_initiate_sync() function in the general API to better provide a
more generic general API.

* Wrote a function called zdtm_set_sync_type() in the general API which
handles setting the synchronization type in the current library
environment. I also modified zdtm_intialize() to set the stored
sync_type to an initial value of 0x00 so that I could check for the
value 0x00 in the zdtm_initiate_sync() function and return in error if
the client program hasn't set the sync type.

* Wrote a function called zdtm_check_cur_auth_state() which checks the
stared cur_auth_state in the current zdtm library environment and
returns values representing the known possible authentication states.
This function was added to the general API.

* Updated the planner file with the tasks that I completed in this
coding session.

2007-02-13 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Implemented the zdtm_handle_connection() function in the zdtm_sync.c
file and documented it in the zdtm_sync.h so that people reading the
code can have a better understanding of the general API.

* Fixed some documentation in the zdtm network abstraction layer.

2007-02-07 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Moved the zdtm_send_message() and zdtm_recv_message() functions from
the zdtm_sync.h and zdtm_sync.c files into zdtm_net.h and zdtm_net.c and
renamed them to _zdtm_wrapped_send_message() and
_zdtm_wrapped_recv_message() respectively.

* Stubbed out the zdtm_handle_connecion() general API function and
provided some documentation to it so the general API can easily be
understood.

* Filled in the content to the zdtm_handle_connection() function and
fixed all the documentation in the zdtm_net.h file so that it is correct
to all the modifications I have made in the past few days.

2007-02-05 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Modified the build configuration so that the testing sub-directory is
build conditionally depending on if it is a Unix Variant or Windows.
Hence, the testing sub-directory will be built on Unix Variants and will
NOT be built for Windows.

2007-02-05 Andrew De Ponte <cyphactor@users.sourceforge.net>

* I moved the appropriate portions of zdtm_sync.h and zdtm_sync.c into
the newley created files to create better structure and organization to
the code base.

* I also added the zdtm_types.c file which was necessary to define some
extern variables.

* Changed the zdtm_env_t socket members from the unix standard integer
type to the newly defined cross-platform type SOCKET.

* Modified the _zdtm_listen_for_zaurus() function in the zdtm_net.c file
to be cross-platform between Unix Varients and Windows.

* Modified the _zdtm_handle_zaurus_conn() function in the zdtm_net.c
file to be cross-platform between Unix Varients and Windows.

* Modified the _zdtm_close_zaurus_conn() function in the zdtm_net.c file
to be cross-platform between Unix Varients and Windows.

* Modified the _zdtm_conn_to_zaurus() function in the zdtm_net.c file to
be cross-platform between Unix Varients and Windows.

* Modified the _zdtm_close_conn_to_zaurus() function in the zdtm_net.c
file to be cross-platform between Unix Varients and Windows.

* Modified the _zdtm_send_comm_message_to() function in the zdtm_net.c
file and zdtm_net.h file to be cross-platform between Unix Varients and
Windows. I also rewrote the algorithm to always write COM_MSG_SIZE
bytes. It had a problem before where if due to buffer issues less than
COM_MSG_SIZE bytes were written then it would return in error.

* The _zdtm_send_ack_message(), _zdtm_send_rqst_message(), and
_zdtm_send_abrt_message() functions needed NO modification since they
are strictly interface functions to the _zdtm_send_comm_message_to()
function.

* Rewrote the _zdtm_recv_message() function in the zdtm_net.c file to be
cross-platform between Unix Varients and Windows. I also rewrote it from
scratch to make sure we are recving all the necessary/available bytes
given the that recv() does not gaurante one gets the number of bytes
they request.

* The _zdtm_send_message() function needed NO modification since it is
strictly an interface function to the _zdtm_send_message_to() function.

* Modified the _zdtm_send_message_to() function in the zdtm_net.c file
to be cross-platform between Unix Varients and Windows. I also rewrote a
portion of it so that it will write all the messages bytes, without
having to worry about buffering issues.

* Wrote the content for the README file to describe appropriately how to
build on Unix, Mac OS X, and Windows.

* Modified the configure.ac to handle the host specific build flags.

* Modified the src/Makefile.am to use the new host specific LDFLAGS
provided in the configure.ac.

* Did both Linux and Windows tests on Debian (Etch = Testing), all
builds with 0 errors, 0 warnings. However, the functionality has not
been tested.

* Removed testing directory from the root Makefile.am file so that the
testing directory wouldn't be built. The testing directory was custom
testing designed for unix version only, and hence uses functions that
are not exported via the windows DLL yet. Once, they are ported over
it will be re-inserted into the root Makefile.am.

2007-01-31 Andrew De Ponte <cyphactor@users.sourceforge.net>

* I created all the files for the new code base structure and added them
to the Makefile.am.

2006-10-09 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Implemented the zdtm_obtain_device_info() function as part of the
general API and documented it.

* Implemented and documented the zdtm_initialize_sync() function as part
of the general API and documented it.

* Updated the zdtm_test_daemon such that zdtm_initialize_sync() and
zdtm_obtain_device_info() where used to replace the code that is now
obfuscated by those general API functions.

2006-10-06 Andrew De Ponte <cyphactor@users.sourceforge.net>

* Changed the names of the zdtm_open_log, zdtm_write_log,
zdtm_dump_msg_log, zdtm_close_log, and zdtm_listen_for_zaurus by
prepending an underscore(_) to their names, as to indicate that they are
theoretically private functions and are not a part of the general API.

* Implemented the zdtm_initialize and zdtm_finalize functions to be part
of the general API and to encapsulate the usage of the theoretically
private functions _zdtm_open_log, _zdtm_listen_for_zaurus, and
_zdtm_close_log.

* Documented the zdtm_initialize and zdtm_finalize functions.

* Changed the names of the zdtm_conn_to_zaurus, zdtm_send_message_to,
and the zdtm_handle_zaurus_conn functions by prepending an underscore(_)
to their names, as to indicate that they are theoretically private
functions and are not a part of the general API.

* Implemented the zdtm_connect function to be part of the general API
and to encapsulate the usage of the theoretically private functions
_zdtm_conn_to_zaurus, _zdtm_send_message_to, and
_zdtm_handle_zaurus_conn.

* Documented the zdtm_connect function.

* Changed the namse of the zdtm_send_rqst_message, zdtm_recv_message,
zdtm_send_ack_message, zdtm_send_abrt_message, zdtm_send_comm_message_to
and zdtm_send_message functions by prepending an underscore(_) to their
names, as to indicate that they are theoretically private functions and
are not a part of the general API.

* Implemented the zdtm_send_message and zdtm_recv_message function to be
part of the general API and to encapsulate the usage of the
theoretically private functions _zdtm_send_message, _zdtm_recv_message,
_zdtm_send_rqst_message, and _zdtm_send_ack_message.

* Changed the names of the zdtm_close_zaurus_conn and
zdtm_close_conn_to_zaurus functions by prepending an underscore(_) to
their names, as to indicate that they are theoretically private
functions and are not a part of the general API.

* Implemented the zdtm_disconnect function to be part of the general API
and to encapsulate the usage of the theoretically private functions
_zdtm_recv_message, _zdtm_send_message, _zdtm_close_zaurus_conn, and
_zdtm_close_conn_to_zaurus.

* Documented the zdtm_send_message, zdtm_recv_message, and
zdtm_disconnect functions.

* Converted zdtm_test_daemon.c so that it used the new general API
functions and used the new private functions when necessary.

* Converted zdtm_prepare_message_test.c so that it used the new general
API functions and used the new private functions when necessary.

* Changed the names fo the zdtm_checksum, zdtm_is_ack_message,
zdtm_is_rqst_message, zdtm_is_abrt_message, zdtm_clean_message,
zdtm_prepare_message, and zdtm_parse_raw_msg functions by prepending an
underscore(_) to their names, as to indicate that they are theoretically
private functions and are not a part of the general API.

* Converted zdtm_prepare_message_test.c so that it used
_zdtm_prepare_message rather than zdtm_prepare_message.

* Documented the _zdtm_send_comm_message_to, _zdtm_send_ack_message,
_zdtm_send_rqst_message, _zdtm_send_abrt_message, and _zdtm_send_message
functions, and updated the documentation for the _zdtm_send_message_to
function so that it better matched it's functionality.

* Implemented the _zdtm_log_error function.

* Added some logging using the _zdtm_log_error function and used
_zdtm_clean_message where people had neglected to add it.

* Debugged and cleaned up the zdtm_test_daemon application after it was
converted to use all the new library API functions. Hence, it is now
functional again!
